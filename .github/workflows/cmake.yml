name: CMake

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install SFML
      run: sudo apt-get install libsfml-dev
    
    - name: Install xcb
      run: sudo apt install xcb
      
    - name: Install x11
      run: sudo apt-get install libx11-dev libxrandr-dev

    - name: Install xmu
      run: sudo apt-get install libxmu-dev

    - name : Install glfw
      run: sudo apt-get install libglfw3 libglfw3-dev

    - name: Install ecm
      run: sudo apt install extra-cmake-modules

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/bin --config ${{env.BUILD_TYPE}}

    # - name: Test
      # working-directory: ${{github.workspace}}/Example/bin
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      # run: cd Example; ctest -C ${{env.BUILD_TYPE}}
